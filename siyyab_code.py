# -*- coding: utf-8 -*-
"""cluster_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sa4cl440GpCpAIJJNkN6nG3Lvxd-F90r
"""

from google.colab import drive
drive.mount('/content/drive')

"""Load by manual use this code"""



"""Islamabad Housing"""

# Importing required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

# Load dataset
df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Clustering/islamabad_housing.csv')

# Drop unnecessary columns
df = df.drop(columns=['Unnamed: 0', 'city'])

# Add metadata (Name, Student Number, GitHub Link)
metadata = {
    "Name": "Siyyab Khan",
    "Student Number": "23094658",
    "GitHub Repository": "https://github.com/siyab342/clusteringAndfitting.git"
}
print(metadata)

# Check dataset
print(df.head())

# Function 1: Plot Histogram
def plot_histogram(data, column, filename):
    plt.figure(figsize=(8, 6))
    plt.hist(data[column], bins=20, color='Aquamarine', edgecolor='black')
    plt.title(f'Histogram of {column}', fontsize=16)
    plt.xlabel(column, fontsize=14)
    plt.ylabel('Frequency', fontsize=14)
    plt.grid(True)
    plt.tight_layout()
    plt.savefig(filename)
    plt.close()

# Function 2: Plot Scatter Plot
def plot_scatter(data, x_col, y_col, filename):
    plt.figure(figsize=(8, 6))
    plt.scatter(data[x_col], data[y_col], c='#6495ED', alpha=0.6)
    plt.title(f'Scatter Plot: {x_col} vs {y_col}', fontsize=16)
    plt.xlabel(x_col, fontsize=14)
    plt.ylabel(y_col, fontsize=14)
    plt.grid(True)
    plt.tight_layout()
    plt.savefig(filename)
    plt.close()

# Function 3: Plot Heatmap (Updated to handle non-numeric data)
def plot_heatmap(data, filename):
    numeric_data = data.select_dtypes(include=[np.number])  # Select only numeric columns
    plt.figure(figsize=(10, 8))
    sns.heatmap(numeric_data.corr(), annot=True, cmap='coolwarm', fmt=".2f")
    plt.title('Correlation Heatmap', fontsize=16)
    plt.tight_layout()
    plt.savefig(filename)
    plt.close()


# Function 4: Plot Elbow Plot for K-Means
def plot_elbow(data, max_k, filename):
    inertia = []
    K_range = range(1, max_k + 1)
    for k in K_range:
        km = KMeans(n_clusters=k, random_state=42)
        km.fit(data)
        inertia.append(km.inertia_)
    plt.figure(figsize=(8, 6))
    plt.plot(K_range, inertia, marker='o', linestyle='--', color='b')
    plt.title('Elbow Plot for Optimal K', fontsize=16)
    plt.xlabel('Number of Clusters (K)', fontsize=14)
    plt.ylabel('Inertia', fontsize=14)
    plt.grid(True)
    plt.tight_layout()
    plt.savefig(filename)
    plt.close()

# Function 5: Plot Violin Plot
#def plot_violin(data, column, filename):
 #   plt.figure(figsize=(8, 6))
 #   sns.violinplot(x=data[column], color='skyblue')
 #   plt.title(f'Violin Plot of {column}', fontsize=16)
 #   plt.xlabel(column, fontsize=14)
 #   plt.tight_layout()
 #   plt.savefig(filename)
 #   plt.close()

# Generate Plots
plot_histogram(df, 'price', 'histogram_price.png')
plot_scatter(df, 'Area_in_Marla', 'price', 'scatter_area_price.png')
plot_heatmap(df, 'heatmap_correlation.png')

# Ensure only numerical columns are passed for clustering and elbow plot
numerical_data = df[['price', 'baths', 'bedrooms', 'Area_in_Marla']]
plot_elbow(numerical_data, max_k=10, filename='elbow_plot.png')

# K-Means Clustering
kmeans = KMeans(n_clusters=3, random_state=42)
df['Cluster'] = kmeans.fit_predict(numerical_data)

# Line Fitting
X = df[['Area_in_Marla']]
y = df['price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
regressor = LinearRegression()
regressor.fit(X_train, y_train)
y_pred = regressor.predict(X_test)

# Print regression results
print("Regression Coefficient:", regressor.coef_)
print("Regression Intercept:", regressor.intercept_)

# Generate Violin Plot
plot_violin(df, 'price', 'violin_price.png')